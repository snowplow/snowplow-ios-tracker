//  Copyright (c) 2013-2023 Snowplow Analytics Ltd. All rights reserved.
//
//  This program is licensed to you under the Apache License Version 2.0,
//  and you may not use this file except in compliance with the Apache License
//  Version 2.0. You may obtain a copy of the Apache License Version 2.0 at
//  http://www.apache.org/licenses/LICENSE-2.0.
//
//  Unless required by applicable law or agreed to in writing,
//  software distributed under the Apache License Version 2.0 is distributed on
//  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
//  express or implied. See the Apache License Version 2.0 for the specific
//  language governing permissions and limitations there under.

import Foundation

/// The global tracker state which collects all the state generated by the tracker state machines.
class TrackerState: TrackerStateSnapshot {
    private var trackerState: [String: StateFuture] = [:]

    /// Set a future computable state with a specific state identifier
    func setStateFuture(_ state: StateFuture, identifier stateIdentifier: String) {
        trackerState[stateIdentifier] = state
    }

    /// Get a future computable state associated with a state identifier
    func stateFuture(withIdentifier stateIdentifier: String) -> StateFuture? {
        return trackerState[stateIdentifier]
    }

    func remove(withIdentifier stateIdentifer: String) {
        trackerState.removeValue(forKey: stateIdentifer)
    }

    /// Get an immutable copy of the whole tracker state
    func snapshot() -> TrackerStateSnapshot? {
        let newTrackerState = TrackerState()
        newTrackerState.trackerState = trackerState
        return newTrackerState
    }

    // Protocol SPTrackerStateSnapshot

    func state(withIdentifier stateIdentifier: String) -> State? {
        return stateFuture(withIdentifier: stateIdentifier)?.computeState()
    }

    func state(withStateMachine stateMachine: StateMachineProtocol) -> State? {
        return state(withIdentifier: stateMachine.identifier)
    }
}
